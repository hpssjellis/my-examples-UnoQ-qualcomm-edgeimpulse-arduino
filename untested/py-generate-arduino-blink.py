#!/usr/bin/env python3
"""
Arduino UNO Q Dynamic Blink Deployer
=====================================
This script dynamically generates an Arduino blink sketch and deploys it
to the STM32 microcontroller on the Arduino UNO Q board using App Lab.

The generated files will be placed in: ./generated_blink_app/
"""

import os
import subprocess
import sys
from pathlib import Path

# Configuration
OUTPUT_DIR = "generated_blink_app"  # <-- Clear folder name!
APP_NAME = "dynamic_blink"
BLINK_INTERVAL_MS = 1000  # LED blink interval in milliseconds
LED_PIN = 13  # Standard Arduino LED pin

def create_arduino_sketch(led_pin: int, interval_ms: int) -> str:
    """Generate Arduino blink sketch code dynamically."""
    sketch = f"""// Dynamically generated blink sketch
// Generated by Python script

void setup() {{
  pinMode({led_pin}, OUTPUT);
}}

void loop() {{
  digitalWrite({led_pin}, HIGH);
  delay({interval_ms});
  digitalWrite({led_pin}, LOW);
  delay({interval_ms});
}}
"""
    return sketch

def create_brick_config(app_name: str) -> str:
    """Generate brick_config.yaml for App Lab."""
    config = f"""name: {app_name}
version: "1.0.0"
description: "Dynamically generated blink application"
author: "Python Generator"
"""
    return config

def create_brick_compose() -> str:
    """Generate brick_compose.yaml for App Lab Docker services."""
    compose = """version: '3.8'
services:
  # No additional services needed for basic blink
  # This file can be extended for more complex applications
"""
    return compose

def create_python_init() -> str:
    """Generate __init__.py for the brick."""
    init = """# Brick initialization
# This allows the Arduino sketch to be managed by App Lab
"""
    return init

def create_readme(app_name: str, interval_ms: int) -> str:
    """Generate README.md documentation."""
    readme = f"""# {app_name}

This is a dynamically generated blink application for Arduino UNO Q.

## Description
- Blinks the onboard LED at {interval_ms}ms intervals
- Generated automatically by Python script
- Runs on the STM32 microcontroller side of UNO Q

## Usage
Deploy using App Lab CLI:
```bash
applab deploy {app_name}
```

## Generated Files
- `sketch/sketch.ino`: Arduino blink code
- `brick_config.yaml`: App Lab configuration
- `brick_compose.yaml`: Docker services configuration
"""
    return readme

def setup_directory_structure(base_dir: Path):
    """Create the required directory structure for an App Lab brick."""
    # Create main directories
    base_dir.mkdir(exist_ok=True)
    sketch_dir = base_dir / "sketch"
    sketch_dir.mkdir(exist_ok=True)
    
    print(f"üìÅ Created directory structure in: {base_dir.absolute()}")
    return sketch_dir

def write_files(base_dir: Path, sketch_dir: Path):
    """Write all generated files to disk."""
    
    # Generate and write Arduino sketch
    sketch_code = create_arduino_sketch(LED_PIN, BLINK_INTERVAL_MS)
    sketch_file = sketch_dir / "sketch.ino"
    sketch_file.write_text(sketch_code)
    print(f"‚úÖ Generated Arduino sketch: {sketch_file}")
    
    # Generate and write brick configuration
    config_content = create_brick_config(APP_NAME)
    config_file = base_dir / "brick_config.yaml"
    config_file.write_text(config_content)
    print(f"‚úÖ Generated brick config: {config_file}")
    
    # Generate and write compose file
    compose_content = create_brick_compose()
    compose_file = base_dir / "brick_compose.yaml"
    compose_file.write_text(compose_content)
    print(f"‚úÖ Generated compose file: {compose_file}")
    
    # Generate and write __init__.py
    init_content = create_python_init()
    init_file = base_dir / "__init__.py"
    init_file.write_text(init_content)
    print(f"‚úÖ Generated __init__.py: {init_file}")
    
    # Generate and write README
    readme_content = create_readme(APP_NAME, BLINK_INTERVAL_MS)
    readme_file = base_dir / "README.md"
    readme_file.write_text(readme_content)
    print(f"‚úÖ Generated README: {readme_file}")

def deploy_to_applab(base_dir: Path):
    """Deploy the generated app using App Lab CLI."""
    print("\nüöÄ Attempting to deploy to App Lab...")
    
    try:
        # Check if applab CLI is available
        result = subprocess.run(
            ["applab", "--version"],
            capture_output=True,
            text=True,
            check=False
        )
        
        if result.returncode != 0:
            print("‚ö†Ô∏è  App Lab CLI not found or not in PATH")
            print("   Please ensure App Lab is installed on your UNO Q board")
            print(f"   You can manually deploy from: {base_dir.absolute()}")
            return False
        
        # Deploy the app
        deploy_result = subprocess.run(
            ["applab", "deploy", str(base_dir.absolute())],
            capture_output=True,
            text=True,
            check=False
        )
        
        if deploy_result.returncode == 0:
            print("‚úÖ Successfully deployed to App Lab!")
            print(deploy_result.stdout)
            return True
        else:
            print("‚ùå Deployment failed:")
            print(deploy_result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not deploy: {e}")
        print(f"   Manual deployment: Navigate to {base_dir.absolute()}")
        print(f"   Then run: applab deploy {APP_NAME}")
        return False

def main():
    """Main execution function."""
    print("=" * 60)
    print("Arduino UNO Q - Dynamic Blink Sketch Generator & Deployer")
    print("=" * 60)
    print()
    print(f"Configuration:")
    print(f"  - Output directory: ./{OUTPUT_DIR}/")
    print(f"  - LED Pin: {LED_PIN}")
    print(f"  - Blink interval: {BLINK_INTERVAL_MS}ms")
    print()
    
    # Setup directory structure
    base_dir = Path(OUTPUT_DIR)
    sketch_dir = setup_directory_structure(base_dir)
    
    # Generate and write all files
    print("\nüìù Generating files...")
    write_files(base_dir, sketch_dir)
    
    # Deploy to App Lab
    deploy_to_applab(base_dir)
    
    print("\n" + "=" * 60)
    print("‚ú® Generation complete!")
    print(f"üìÇ All files are in: {base_dir.absolute()}")
    print("\nYou can now inspect the generated Arduino sketch at:")
    print(f"   {(sketch_dir / 'sketch.ino').absolute()}")
    print("=" * 60)

if __name__ == "__main__":
    main()
